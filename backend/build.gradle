plugins {
	id "java"
	id "war"
	id "org.springframework.boot" version "3.2.3"
	id "io.spring.dependency-management" version "1.1.4"
    id 'org.jetbrains.kotlin.jvm'
	id "org.sonarqube" version "5.0.0.4638"
	id 'jacoco'		// Use to coverage code in sonarQube
}

group = "fr.eseo"
version = "0.0.1-SNAPSHOT"

java {
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	implementation "org.hibernate.orm:hibernate-core:6.4.4.Final"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.3'
	implementation 'com.mysql:mysql-connector-j:8.3.0'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testCompileOnly 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'com.opencsv:opencsv:5.8'
	implementation 'net.datafaker:datafaker:2.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'io.github.cdimascio:dotenv-java:2.2.0'
}

tasks.named("test") {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'			// Use to coverage code in sonarQube
}

kotlin {
    jvmToolchain(17)
}

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['fr.eseo.tauri.seeder/**',])
		})
	}

}

